// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  username       String
  email          String           @unique
  photo          String?
  password       String
  role           Role             @relation(fields: [roleId], references: [id])
  roleId         Int

  agentProfile   AgentProfile?    @relation("AgentUser")
  approvedAgents AgentProfile[]   @relation("ApprovedByUser")

  ownerProfile   OwnerProfile?

  posts          Post[]           @relation("PostUser")
  approvedPosts  Post[]           @relation("PostAdmin")

  properties     Property[]       @relation("UserProperty")
  activities     AllActivity[]
  photos         UserPhoto[]
  ratings        Rating[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("user")
}


model AgentProfile {
  id            Int      @id @default(autoincrement())

  user          User     @relation("AgentUser", fields: [userId], references: [id])
  userId        Int      @unique

  cnaNumber     String
  licenseNumber Int      @map("New")
  ratings       Rating[]
  isApproved    Boolean  @default(false)

  approvedBy    User?    @relation("ApprovedByUser", fields: [approvedById], references: [id])
  approvedById  Int?

  approvedAt    DateTime?

  @@map("agent_profile")
}


model Post {
  id         Int           @id @default(autoincrement())
  propertyId Int
  user       User          @relation("PostUser", fields: [userId], references: [id])
  userId     Int
  type       String // Consider enum: 'sale' | 'rent' | 'lease'
  status     String // Consider enum: 'active' | 'pending' | 'sold' | 'rented'
  adminId    Int?
  phone      String
  socialLink String?
  admin      User?         @relation("PostAdmin", fields: [adminId], references: [id])
  property   Property      @relation(fields: [propertyId], references: [id])
  activities AllActivity[]
  createdAt  DateTime      @default(now())

  @@map("post")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  value       String // Changed from Int to String for flexibility
  users       User[]
  permissions Permission[]

  @@map("role")
}

model Property {
  id             Int          @id @default(autoincrement())
  owner          User         @relation("UserProperty", fields: [ownerId], references: [id])
  ownerId        Int
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId Int
  bedRoom        Int
  bathRoom       Int
  latitude       String // Consider using Float or Decimal
  longitude      String // Consider using Float or Decimal
  buildingNumber String // Changed from Int to String
  street         String
  floor          Int
  township       String
  region         String
  length         Int          @map("lenth") // Fixed typo
  width          Int
  currency       String // Changed from Int to String (e.g., "USD")
  posts          Post[]
  photos         Photo[]

  @@map("property")
}

model Permission {
  id     Int  @id @default(autoincrement())
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("permission") // Fixed spelling from "permmision"
}

model Photo {
  id         Int      @id @default(autoincrement())
  path       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int

  @@map("photo")
}

model AllActivity {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  action    String
  createdAt DateTime @default(now())

  @@map("all_activity") // Recommended snake_case for table names
}

model PropertyType {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]

  @@map("property_type") // Recommended snake_case
}

model OwnerProfile {
  id      Int    @id @default(autoincrement())
  nrcNo   String // Changed from Int to String (may contain letters)
  address String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique

  @@map("owner_profile")
}

model UserPhoto {
  id     Int    @id @default(autoincrement())
  path   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int

  @@map("user_photo") // Recommended snake_case
}

model Rating {
  id        Int          @id @default(autoincrement())
  point     Int //max - 5
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  agent     AgentProfile @relation(fields: [agentId], references: [id])
  agentId   Int
  createdAt DateTime     @default(now())

  @@map("rating")
}
