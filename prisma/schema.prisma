// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int     @id @default(autoincrement())
    username String
    email    String  @unique
    photo    String?
    password String
    role     Role    @relation(fields: [roleId], references: [id])
    roleId   Int

    agentProfile   AgentProfile?  @relation("AgentUser") // For Agent
    approvedAgents AgentProfile[] @relation("ApprovedByUser") // For Admin - Agent profiles that are approved by Admin

    ownerProfile OwnerProfile? // For Normal/Owner user

    posts         Post[] @relation("PostUser") // For Normal/Owner - Posts of Owner/user
    approvedPosts Post[] @relation("PostAdmin") // For Admin - Posts of Owner/user that are approved by Admin

    properties Property[]
    activities AllActivity[]
    photos     UserPhoto[]
    ratings    Rating[] // For Agent - Rating of agents that are rated by Normal/Owner user

    refreshTokens      RefreshToken[]      @relation("TokenUser")
    passwordResetToken PasswordResetToken?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user")
}

model PasswordResetToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    expiresAt DateTime
    userId    Int      @unique
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    userId    Int
    user      User     @relation("TokenUser", fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("refresh_token")
}

model AgentProfile {
    id Int @id @default(autoincrement())

    user   User @relation("AgentUser", fields: [userId], references: [id])
    userId Int  @unique

    cnaNumber     String
    licenseNumber Int                @map("New")
    ratings       Rating[]
    status        AgentProfileStatus @default(Pending)

    approvedBy   User? @relation("ApprovedByUser", fields: [approvedById], references: [id])
    approvedById Int? // Admin's id - Admin who approve this agent profile

    approvedAt DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@map("agent_profile")
}

model Post {
    id Int @id @default(autoincrement())

    property Property?

    type   PostType // 'sale' | 'rent' | 'lease'
    status PostStatus // 'active' | 'pending' | 'denied'

    user   User @relation("PostUser", fields: [userId], references: [id])
    userId Int

    admin   User? @relation("PostAdmin", fields: [adminId], references: [id])
    adminId Int?

    contact    String
    socialLink String?
    activities AllActivity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("post")
}

enum PostStatus {
    Active
    Pending
    Denied
    Ended
}

model Role {
    id              Int              @id @default(autoincrement())
    name            RoleName
    value           String
    users           User[]
    permissions     Permission[]
    rolePermissions RolePermission[] @relation("permissions")

    @@map("role")
}

model RolePermission {
    roleId       Int
    role         Role       @relation("permissions", fields: [roleId], references: [id])
    permissionId Int
    permission   Permission @relation("roles", fields: [permissionId], references: [id])

    @@id([roleId, permissionId])
}

model Property {
    id             Int             @id @default(autoincrement())
    owner          User            @relation(fields: [ownerId], references: [id])
    ownerId        Int
    propertyType   PropertyType    @relation(fields: [propertyTypeId], references: [id])
    propertyTypeId Int
    bedRoom        Int
    bathRoom       Int
    latitude       String // Consider using Float or Decimal
    longitude      String // Consider using Float or Decimal
    buildingNumber String // Changed from Int to String
    street         String
    floor          Int
    township       String
    region         String
    length         Int
    width          Int
    currency       Int
    postId         Int             @unique
    post           Post            @relation(fields: [postId], references: [id])
    photos         PropertyPhoto[]
    createdAt      DateTime
    updatedAt      DateTime

    @@map("property")
}

model Permission {
    id              Int              @id @default(autoincrement())
    action          String
    resource        String
    role            Role             @relation(fields: [roleId], references: [id])
    roleId          Int
    rolePermissions RolePermission[] @relation("roles")

    @@map("permission") // Fixed spelling from "permmision"
}

model PropertyPhoto {
    id         Int      @id @default(autoincrement())
    path       String
    property   Property @relation(fields: [propertyId], references: [id])
    propertyId Int

    @@map("property_photo")
}

model AllActivity {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    action    String
    createdAt DateTime @default(now())

    @@map("all_activity") // Recommended snake_case for table names
}

model PropertyType {
    id         Int        @id @default(autoincrement())
    name       String     @unique
    properties Property[]

    @@map("property_type") // Recommended snake_case
}

model OwnerProfile {
    id        Int      @id @default(autoincrement())
    nrcNo     String // Changed from Int to String (may contain letters)
    address   String
    phone     String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("owner_profile")
}

model UserPhoto {
    id     Int    @id @default(autoincrement())
    path   String
    user   User   @relation(fields: [userId], references: [id])
    userId Int

    @@map("user_photo")
}

model Rating {
    id        Int          @id @default(autoincrement())
    point     Int //max - 5
    user      User         @relation(fields: [userId], references: [id])
    userId    Int
    agent     AgentProfile @relation(fields: [agentId], references: [id])
    agentId   Int
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    @@map("rating")
}

enum AgentProfileStatus {
    Pending
    Approved
    Rejected
}

enum RoleName {
    Admin
    User
    Agent
}

enum PostType {
    Sale
    Rent
    Lease
}
